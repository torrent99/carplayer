#!/usr/bin/python
 
import obd_io
import serial
import platform
import obd_sensors
from datetime import datetime
import time
import os
import sqlite3
import random
#from datetime import timedelta
 
from obd_utils import scanSerial

current_milli_time = lambda: int(round(time.time() * 1000))

FAKEIT = 1
 
class OBD_Capture():

    def clear_icons_t_speed(self):
    	for i in range(0,self.NBSMOOTH):
            self.t_speed[i]=0;

    def clear_icons_t_maf(self):
    	for i in range(0,self.NBSMOOTH):
            self.t_maf[i]=0;

    def __init__(self):
        self.port = None
        self.NBSMOOTH = 5
        self.t_speed = [0] * self.NBSMOOTH
        self.t_maf = [0] * self.NBSMOOTH
    	for i in range(0,self.NBSMOOTH):
            self.t_speed[i]=0;
    	for i in range(0,self.NBSMOOTH):
            self.t_maf[i]=0;
 	self.tindex=0	# index in the smoothing table
	self.min_throttle_pos=255   # idle throttle position, start high
        localtime = time.localtime(time.time())
        self.old_milli_time = current_milli_time()
 
    def connect(self):
        print "I'm connecting"
#        portnames = scanSerial()
        portnames = [ '/dev/ttyUSB0' ]
        print portnames
        for port in portnames:
            self.port = obd_io.OBDPort(port, None, 2, 2)
            if(self.port.State == 0):
                self.port.close()
                self.port = None
            else:
                break
 
        if(self.port):
            self.mpgfile_message ("Connected...",self.port.port.name)
            print "Connected to "+self.port.port.name
 
    def is_connected(self):
        if FAKEIT:
        	return 1
        else:
        	return self.port

    def kick_it(self):
        self.mpgfile_message ("Problem!!!!","RECONNECTING!!!")
        self.port.close()
        self.connect()
 
    def find_obd_sensorindex(self, sensorName):
	index = 0
        foundit = -1
        for i in obd_sensors.SENSORS:
            if i.shortname == sensorName:
            	foundit = index
            else:
                index +=1
        return foundit

    def mpgfile_message(self, line1, line2):
        try:
            print "doh"
            fo = open("/ramcache/MPG.TXT","w+")
            fo.write(line1)
            fo.write(line2)
            fo.close()
        except:
            return 0

    def mpgprint(self,cShortTerm,cLongTerm,cLongTermMinutes):
        str_cShortTerm = str(cShortTerm)[:4]
        str_cLongTerm = str(cLongTerm)[:4]
        print "Short term MPG"+str_cShortTerm
        print "Long term MPG"+str_cLongTerm
        print "Long term Minutes"+str(cLongTermMinutes)
        self.mpgfile_message((str_cShortTerm+" MPG\n"), (str_cLongTerm+"MPG "+str(cLongTermMinutes)+"min\n"))


    def get_icons(self):
	GasConst = 3355
        GasMafConst = 107310 # 14.7*730*10
  #unsigned long maf=0;
  #byte nb_entry=0;
  #long cons;
  #char decs[16];
  #long toggle_speed = params.per_hour_speed;
 	vss = 0
        maf = 0
        nb_entry = 0

  	for i in range(0,self.NBSMOOTH):
		vss = vss + self.t_speed[i]
		maf = maf + self.t_maf[i]
		if self.t_maf[i] != 0:
			nb_entry = nb_entry + 1

	if nb_entry>0:
		maf=(maf*100)/(nb_entry*100)
        else:
		return "No data"

        vss = vss / self.NBSMOOTH		# average the N latest speed

  # divide MAF by 100 because our function return MAF*100
  # but multiply by 100 for double digits precision
  # divide MAF by 14.7 air/fuel ratio to have g of fuel/s
  # divide by 730 (g/L at 15C) according to Canadian Gov to have L/s
  # multiply by 3600 to get litre per hour
  # formula: (3600 * MAF) / (14.7 * 730 * VSS)
  # = maf*0.3355/vss L/km
  # mul by 100 to have L/100km


	vss = vss * 100  # Multiply by params.speed_adjust;
        if vss == 0:
            vss = 1
  # if maf is 0 it will just output 0
	cons=(maf * GasConst)/vss
        if cons > 0:
            cons=1.2*235214/cons     # convert to MPG UK (1.2 converts from US to UK)
     

  # MPG
  # 6.17 pounds per gallon
  # 454 g in a pound
  # 14.7 * 6.17 * 454 * (VSS * 0.621371) / (3600 * MAF / 100)
  # multipled by 10 for single digit precision
  # new comment: convert from L/100 to MPG

	return cons



#######################################################################################
    def accu_trip(self):
        self.new_milli_time = current_milli_time()
        milli_time_delta = self.new_milli_time - self.old_milli_time
        self.old_milli_time = self.new_milli_time


	rpm_value = self.get_PID_value(self.rpm_sensor_index)
	maf_value = self.get_PID_value(self.maf_sensor_index)
    	speed_value = self.get_PID_value(self.speed_sensor_index)
    	throttle_value = self.get_PID_value(self.throttle_sensor_index)
    	fuel_status_value = self.get_PID_value(self.fuel_status_sensor_index)

#        if (speed_value >0):
#        	delta_dist = (speed_value * milli_time_delta)/ 36

#  if ((byte)vss>0)
#  {
#    delta_dist=(vss*delta_time)/36;
#    // accumulate for all trips
#    for(byte i=0; i<NBTRIP; i++)
#    {
#      params.trip[i].dist+=delta_dist;
#
#      // collect max data
#      if ((byte)vss > params.tripmax[i].maxspeed)
#        params.tripmax[i].maxspeed = (byte)vss;
#    }  
#  }



#  // if engine is stopped, we can get out now
#  if (!has_rpm)
#  {
#    return;
#  }

#  // need auto-save if car is running
#  #ifdef AutoSave
#    if ((long)(time_now - old_time_params) > 30L * 60000L) // more then 30min
#      params_save();
#  #endif   




	# accumulate fuel only if not in DFCO
	# if throttle position is close to idle and we are in open loop -> DFCO

	# detect idle pos

	if (throttle_value < self.min_throttle_pos) and ( throttle_value != 0): #And make sure its not '0' returned by no response in read byte function
		self.min_throttle_pos = throttle_value

	if fuel_status_value[5] == "1":
		open_load = 1
        else:
		open_load = 0

	if ((throttle_value<(self.min_throttle_pos+4)) and (open_load == 1)):
		self.clear_icons_t_maf()
		maf_value = 0  # decellerate fuel cut-off, fake the MAF as 0 :)
	
        # Now store the gathered MAF and speed vales in the smoothing array

       	self.t_speed[self.tindex]=speed_value
       	self.t_maf[self.tindex]=maf_value
       	# increment index and roll over
       	self.tindex = (self.tindex+1)
       	if self.tindex == self.NBSMOOTH:
       		self.tindex = 0

#######################################################################################
    def get_PID_value(self,sensor_index):
	if FAKEIT == 1:
               	time.sleep(0.1)
		return random.randrange(1,255)
        else:
		(name, value, unit) = self.port.sensor(sensor_index)
                if (value == "NORESPONSE") or (value == "NODATA") or (value == "ERROR"):
                     # It looks like we need to give it a kick!
                     self.kick_it()
                     return 0
		return value

##########################################################################################
        
    def ComputeFuelConsumption(self):
        nCurrentTime = time.time()
        
        try:
            nStart = nCurrentTime - 20
            cLimit = " and time_read > " + str(nStart) + " order by time_read desc limit 6"
            cursor.execute('''SELECT maf,speed from SensorReadings where speed > "0" and maf > "0" and rpm != "NODATA" ''' + cLimit)
            data = cursor.fetchall()
        except sqlite3.OperationalError,msg:
            return msg
	print "Data len is"
        print len(data)
        if (len(data) > 0):
            nFuelConsumption = 0
            for x in range(0,len(data)):
                print "Zero is"
                print float(data[x][0])
                print "One is"
                print float(data[x][1])
                if float(data[x][1]) > float(0):
                	nFuelConsumption += (3600 * float(data[x][0]))/(9069.90 * float(data[x][1]))
                
            nAvgFuelConsumption = nFuelConsumption/len(data)
            print nAvgFuelConsumption
            print type(nAvgFuelConsumption)
            #print data[x][0],data[x][1],data[x][2]
            return "{:5.2f}".format(nAvgFuelConsumption).lstrip()
        else:
            return "No data"
 
        #print nAvgFuelConsum
        
    def is_number(self,DataToTest):
        try:
            float(DataToTest)
            return True
        except ValueError:
            return False    
                
                
 ###################################################################################################################               
    def capture_data(self):
 
            
	if FAKEIT == 0:
 		#Find supported sensors - by getting PIDs from OBD
		# its a string of binary 01010101010101 
		# 1 means the sensor is supported
		self.supp = self.port.sensor(0)[1]
                if "ERROR" in self.supp:
                      return 0
		self.supportedSensorList = []
        	self.unsupportedSensorList = []
        
        
        	# loop through PIDs binary
        	self.supp = "0000000000111011" # SKS 0B MAP, 0C RPM, OD VSS/speed, 0F Inlet Temp, 10 MAF
        	self.supp = "0000000000011001" # SKS  0C RPM, OD VSS/speed,  10 MAF
        	for i in range(0, len(self.supp)):
            		if self.supp[i] == "1":
                		# store index of sensor and sensor object
                		self.supportedSensorList.append([i+1, obd_sensors.SENSORS[i+1]])
            		else:
                		self.unsupportedSensorList.append([i+1, obd_sensors.SENSORS[i+1]])
 
        	if(self.port is None):
            		return None

       	self.rpm_sensor_index =  self.find_obd_sensorindex( "rpm")
       	self.maf_sensor_index =  self.find_obd_sensorindex( "maf")
       	self.speed_sensor_index =  self.find_obd_sensorindex( "speed")
       	self.throttle_sensor_index =  self.find_obd_sensorindex( "throttle_pos")
       	self.fuel_status_sensor_index =  self.find_obd_sensorindex( "fuel_status")
       	min_throttle_value=255
       	tindex = 0
       	self.clear_icons_t_maf()
       	self.clear_icons_t_speed()
        
       	#Loop until Ctrl C is pressed        
       	try:
           	nRunningTotalFuelConsumption = 0
           	nStartTime = time.time()
           	x = 0
           	while True:
                	current_time = time.time()
                	#current_time = str(localtime.hour)+":"+str(localtime.minute)+":"+str(localtime.second)+"."+str(localtime.microsecond)
                	rpm_value = self.get_PID_value(self.rpm_sensor_index)
                	maf_value = self.get_PID_value(self.maf_sensor_index)
                	speed_value = self.get_PID_value(self.speed_sensor_index)
	
                	self.t_speed[tindex]=speed_value
                	self.t_maf[tindex]=maf_value
                	# increment index and roll over
                	tindex = (tindex+1)
                	if tindex == self.NBSMOOTH:
                    		tindex = 0

                	log_string = str(current_time) + "\n"
                    
                	#cFuelConsumption = self.ComputeFuelConsumption()
                	cFuelConsumption = self.get_icons()
                	if (cFuelConsumption != "No data"):
                    		x += 1
                	if (x > 0):
                    		if (self.is_number):
                        		nRunningTotalFuelConsumption += float(cFuelConsumption)
                    		nTripAverage = nRunningTotalFuelConsumption/x
                    		cTripAverage = "{:5.2f}".format(nTripAverage).lstrip()
                	else:
                    		cTripAverage = "Nodata"
                
                	cDurationInMinutes = "{:3.0f}".format((current_time - nStartTime)/60).lstrip()
                	self.mpgprint(cFuelConsumption,cTripAverage,cDurationInMinutes)
                    
                	#print log_string,
                	#time.sleep(0.5)
                

	except KeyboardInterrupt:
                if FAKEIT == 0:
       			self.port.close()
       		print("stopped")
            
if __name__ == "__main__":
    print "Initializing..."
 
    try:
    	o = OBD_Capture()
        o.mpgfile_message ("Initializing...","                ")
	while True:
    		o.connect()
    		time.sleep(3)
    		if not o.is_connected():
        		print "Not connected"
        		print "Error: Not connected to OBDII..."
                        o.mpgfile_message ("Not connected...","Error: Not conne")
        		time.sleep(10)
    		else:
        		o.capture_data()
    except KeyboardInterrupt:
	print("stopped")
            
   
